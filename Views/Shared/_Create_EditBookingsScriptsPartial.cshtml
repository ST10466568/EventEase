<script>
    $(document).ready(function () {
        var bookings = @Html.Raw(Json.Serialize(Model.Bookings ?? new List<VenueBooking.Models.Booking>()));
        console.log("Bookings array:", bookings);

        var bookingIndex = 0;

        if (bookings && bookings.length > 0) {
            console.log("Bookings array has data. Initializing display.");
            updateBookingsDisplay();
        } else {
            console.log("No existing bookings found.");
            $("#bookingsContainer").html("<p>No bookings added yet. Click 'Add Booking' to start.</p>");
        }

        function addBooking(venueId, bookingDate) {
            var booking = {
                bookingId: 0,
                VenueId: parseInt(venueId) || null,
                BookingDate: bookingDate
            };
            bookings.push(booking);
            updateBookingsDisplay();
        }

        function updateBookingsDisplay() {
            var container = $("#bookingsContainer");
            container.empty();

            bookings.forEach(function (booking, index) {
                var bookingDiv = $(`<div class="booking-item"></div>`);
                var bookingDateDiv = $(`<div class="form-group"></div>`);
                var bookingDateLabel = $(`<label class="control-label">Booking Date</label>`);
                var bookingDateInput = $(`<input type="date" name="bookings[${index}].BookingDate" class="form-control booking-date" required />`);

                var dateStr = booking.bookingDate || booking.BookingDate;
                if (dateStr) {
                    try {
                        var dateObj = new Date(dateStr);
                        if (!isNaN(dateObj.getTime())) {
                            bookingDateInput.val(dateObj.toISOString().split('T')[0]);
                        }
                    } catch (e) {
                        console.error(`Error parsing date string: ${dateStr}`, e);
                    }
                }

                var venueDiv = $(`<div class="form-group"></div>`);
                var venueLabel = $(`<label class="control-label">Venue</label>`);
                var venueSelect = $(`<select name="bookings[${index}].VenueId" class="form-control booking-venue" required></select>`);
                @foreach (var venue in ViewBag.VenueId)
                {
                    @:venueSelect.append($('<option value="@venue.Value">@Html.Raw(venue.Text)</option>'));
                }
                venueSelect.val(booking.venueId || booking.VenueId);

                var bookingId = booking.bookingId || booking.BookingId || 0;
                var hiddenId = $(`<input type="hidden" name="bookings[${index}].BookingId" value="${bookingId}" />`);

                var removeButton = $(`<button type="button" class="btn btn-danger removeBookingButton" data-booking-id="${bookingId}">Remove</button><hr />`);
                removeButton.click(function () {
                    var button = $(this);
                    var bookingIdToDelete = button.data('booking-id');

                    if (bookingIdToDelete && bookingIdToDelete > 0) {
                        if (!confirm('Are you sure you want to remove this booking permanently?')) return;
                        $.ajax({
                            url: '@Url.Action("DeleteBooking", "Event")/' + bookingIdToDelete,
                            type: 'POST',
                            success: function () {
                                var currentIndex = bookings.findIndex(b => (b.bookingId || b.BookingId) === bookingIdToDelete);
                                if (currentIndex > -1) {
                                    bookings.splice(currentIndex, 1);
                                    updateBookingsDisplay();
                                }
                            },
                            error: function (xhr) {
                                alert('Error removing booking: ' + (xhr.responseJSON?.message || xhr.responseText));
                            }
                        });
                    } else {
                        var itemToRemove = button.closest('.booking-item');
                        var indexToRemove = container.children('.booking-item').index(itemToRemove);
                        if (indexToRemove > -1) {
                            bookings.splice(indexToRemove, 1);
                            updateBookingsDisplay();
                        }
                    }
                });

                bookingDateDiv.append(bookingDateLabel).append(bookingDateInput);
                venueDiv.append(venueLabel).append(venueSelect);
                bookingDiv.append(hiddenId).append(bookingDateDiv).append(venueDiv).append(removeButton);
                container.append(bookingDiv);
            });

            $("#bookingsJson").val(JSON.stringify(bookings));
        }

        $("#addBookingButton").click(function () {
            addBooking(null, "");
        });

        $("form#editEventForm, form#createEventForm").submit(function () {
            var currentBookings = [];
            $("#bookingsContainer .booking-item").each(function () {
                var bookingDate = $(this).find(".booking-date").val();
                var venueId = $(this).find(".booking-venue").val();
                var bookingId = $(this).find(".removeBookingButton").data('booking-id') || 0;

                currentBookings.push({
                    BookingId: parseInt(bookingId),
                    BookingDate: bookingDate,
                    VenueId: parseInt(venueId) || null
                });
            });

            bookings = currentBookings;
            $("#bookingsJson").val(JSON.stringify(bookings));
        });
        $("#checkButton").click(function () {
            var currentBookings = [];
            $("#bookingsContainer .booking-item").each(function () {
                var bookingDate = $(this).find(".booking-date").val();
                var venueId = $(this).find(".booking-venue").val();
                var bookingId = $(this).find(".removeBookingButton").data('booking-id') || 0;

                currentBookings.push({
                    BookingId: parseInt(bookingId),
                    BookingDate: bookingDate,
                    VenueId: parseInt(venueId) || null
                });
            });

            console.log("Serialized bookings:", currentBookings);
        });
    });
</script>